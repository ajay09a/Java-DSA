package BinaryTreeProblem;

public class BinaryTreeNode<T> {
	public T data;
	public BinaryTreeNode<T> left;
	public BinaryTreeNode<T> right;
	
	BinaryTreeNode(T data){
		this.data = data;
	}

}




************************************
************************************




package BinaryTreeProblem;

import java.util.*;

public class BinaryTreeUse {
	
	public static void printTree(BinaryTreeNode<Integer> root) {
		if(root == null)
			return;
		if(root.left == null && root.right == null) {
			System.out.println(root.data+": ");
		}
		else if(root.left == null) {
			System.out.println(root.data+": "+"R"+root.right.data);
		}
		else if(root.right == null) {
			System.out.println(root.data+": "+"L"+root.left.data);
		}
		else {
			System.out.println(root.data+": "+"L"+root.left.data+","+"R"+root.right.data);
		}
		printTree(root.left);
		printTree(root.right);
		
	}
	
	public static BinaryTreeNode<Integer> takeInputBetter(){
		Scanner s = new Scanner(System.in);
		System.out.println("Enter root data:");
		int rootData = s.nextInt();
		
		if(rootData==-1) {
			return null;
		}
		
		BinaryTreeNode<Integer> root = new BinaryTreeNode<>(rootData);
		Queue<BinaryTreeNode<Integer>> pendingChild = new LinkedList<>();
		pendingChild.add(root);
		
		while(!pendingChild.isEmpty()) {
			BinaryTreeNode<Integer> front = pendingChild.poll();
			System.out.println("Enter left child of "+ front.data);
			int leftData = s.nextInt();
			if(leftData!=-1) {
				BinaryTreeNode<Integer> leftChild = new BinaryTreeNode<>(leftData);
				front.left = leftChild;
				pendingChild.add(leftChild);
			}
			System.out.println("Enter right child of "+ front.data);
			int rightData = s.nextInt();
			if(rightData!=-1) {
				BinaryTreeNode<Integer> rightChild = new BinaryTreeNode<>(rightData);
				front.right = rightChild;
				pendingChild.add(rightChild);
			}
		}
		return root;
	}
	
	
	public static void main(String[] args) {
		BinaryTreeNode<Integer> root = takeInputBetter();
		printTree(root);
	}

}
