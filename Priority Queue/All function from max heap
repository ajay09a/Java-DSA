import java.util.ArrayList;
public class PQ {
    // Complete this class
    private ArrayList<Integer> heap = new ArrayList<>();

    boolean isEmpty() {
        // Implement the isEmpty() function here
        return heap.isEmpty();
    }

    int getSize() {
        // Implement the getSize() function here
        return heap.size();
    }

    int getMax() {
        // Implement the getMax() function here
        if(heap.isEmpty()){
            return Integer.MIN_VALUE;
        }else{
            return heap.get(0);
        }
    }
    
    void insert(int element) {
        // Implement the insert() function here
        heap.add(element);
        int childIndex = heap.size() - 1;
        while (childIndex > 0) {
            int parentIndex = (childIndex - 1) / 2;
            if (heap.get(childIndex) > (heap.get(parentIndex))) {
                int temp = heap.get(childIndex);
                heap.set(childIndex, heap.get(parentIndex));
                heap.set(parentIndex, temp);
                childIndex = parentIndex;
            } else {
                break; //we come out of while loop
            }
        }
    }

    int removeMax() {
        if(isEmpty()) {
            return Integer.MIN_VALUE;
        }
        int maxElement=heap.get(0);
        heap.set(0, heap.get(heap.size()-1));
        heap.remove(heap.size()-1);
        
        int parentIndex = 0;
        int leftChildIndex = 2*parentIndex+1;
        int rightChildIndex = 2*parentIndex+2;
        int maxIndex = 0;
        while(leftChildIndex<heap.size()){
            if(heap.get(leftChildIndex)>heap.get(maxIndex))
               {
                   maxIndex=leftChildIndex;
               }
               if(rightChildIndex < heap.size() && heap.get(rightChildIndex)>heap.get(maxIndex))
                  {
                      maxIndex=rightChildIndex; 
                  }
                  if(maxIndex!=parentIndex){
                      //here we swap and pass maximum value to the parent
                      int temp = heap.get(maxIndex);
                      heap.set(maxIndex, heap.get(parentIndex));
                      heap.set(parentIndex, temp);
                      parentIndex = maxIndex;
                      leftChildIndex = 2*parentIndex + 1;
                      rightChildIndex = 2* parentIndex + 2;
                  }
                  else{ 
                      //if maxIndex is not changed, parent is the maximum element then come out of the loop
                      break;
                  }
         }
        return maxElement;     
    }

}

