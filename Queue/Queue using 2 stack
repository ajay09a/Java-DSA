package queuePackage;

import java.util.Stack;

public class QueueUsing2Stack {
	static Stack<Integer> s1;
    static Stack<Integer> s2;
    int size;

    public QueueUsing2Stack(){
    	s1 = new Stack<Integer>();
    	s2 = new Stack<Integer>();
    	size = 0;
    }

    

    public int size(){
      return size;
    }

    public boolean isEmpty(){
        return size==0;
    }

    public void push(int elem) {
      s1.push(elem);
      size++;
    }

    public int top(){
        while(!s1.empty()) {
        	s2.push(s1.pop());
        }
        int ans = s2.peek();
        while(!s2.empty()) {
        	s1.push(s2.pop());
        }
        return ans;
    }

    public int pop() {
    	while(!s1.empty()) {
        	s2.push(s1.pop());
        }
        int ans = s2.pop();
        while(!s2.empty()) {
        	s1.push(s2.pop());
        }
        size--;
        return ans;
    }

}




***********************************
***********************************




package queuePackage;

public class QueueUse {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		QueueUsing2Stack queue = new QueueUsing2Stack();
		System.out.println(queue.isEmpty());
		queue.push(10);
		queue.push(20);
		queue.push(30);
		System.out.println(queue.size());
		System.out.println(queue.pop());
		System.out.println(queue.top());
		System.out.println(queue.size());
		System.out.println(queue.isEmpty());
	}

}
