package queuePackage;

import java.util.*;

public class StackUsing2Queue {
	 private Queue<Integer> q1;
	    private Queue<Integer> q2;
	    private int size;

    public StackUsing2Queue(){
    	q1=new LinkedList<Integer>();
        q2=new LinkedList<Integer>();
        size=0;
    }

    

    public int size(){
      return size;
    }

    public boolean isEmpty(){
        return size==0;
    }

    public void push(int elem) {
    	q1.add(elem);     
        size=size+1;
    }

    public int top(){
    	if (q1.isEmpty())
        {
            return -1;
        }
        while(q1.size()!=1)
        {
            q2.add(q1.remove());
        }
        int top=q1.peek();
        q2.add(q1.remove());
        
        Queue<Integer> q=q1;
        q1=q2;
        q2=q;
        return top;
    }

    public int pop() {
    	if (q1.isEmpty())
        {
            return -1;
        }
        while(q1.size()!=1)
        {
            q2.add(q1.remove());
        }
        int top=q1.remove();
         
        Queue<Integer> q=q1;
        q1=q2;
        q2=q;
        size=size-1;
         return top;
    }

}





*******************************************
*******************************************






package queuePackage;

public class QueueUse {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		StackUsing2Queue queue = new StackUsing2Queue();
		System.out.println(queue.isEmpty());
		queue.push(10);
		queue.push(20);
		queue.push(30);
		System.out.println(queue.size());
		System.out.println(queue.pop());
		System.out.println(queue.top());
		System.out.println(queue.size());
		System.out.println(queue.isEmpty());
	}

}
