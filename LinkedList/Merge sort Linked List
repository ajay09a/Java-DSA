public static LinkedListNode<Integer> mergeSort(LinkedListNode<Integer> head) {
		//Your code goes here
         //Handling base case where length of linked is 0 or 1
        if (head==null || head.next==null)
        {
            return head;
        }
        LinkedListNode<Integer> midNode=midPoint(head),part1Head=head,part2Head=null;
        part2Head=midNode.next;
        midNode.next=null;
        LinkedListNode<Integer> head1=mergeSort(part1Head);
        LinkedListNode<Integer> head2=mergeSort(part2Head);
        LinkedListNode<Integer> newHead=mergeTwoSortedLinkedLists(head1,head2);
        return newHead;
	}
    public static LinkedListNode<Integer> mergeTwoSortedLinkedLists(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
        //Your code goes here
        if(head1==null)
            return head2;
        if(head2==null)
            return head1;
        LinkedListNode<Integer> newNode = null, newTail = null;

        if(head1.data < head2.data){
            newNode = head1;
            newTail = head1;
            head1 = head1.next;
        }
        else{
            newNode = head2;
            newTail = head2;
            head2 = head2.next;
        }
        while(head1!=null && head2!=null){  
            if(head1.data < head2.data){
                newTail.next = head1;
                newTail = newTail.next;
                head1 = head1.next;
            }
            else{
                newTail.next = head2;
                newTail = newTail.next;
                head2 = head2.next;
            }
        }
        if(head1!=null){
            newTail.next = head1;
        }
        if(head2!=null){
            newTail.next = head2;
        }
        
        return newNode;
    }
    
    public static LinkedListNode<Integer> midPoint(LinkedListNode<Integer> head) {
        //Your code goes here
        if (head==null || head.next==null)
        {
            return head;
        }
        LinkedListNode<Integer> fast=head,slow=head;
        while(fast.next!=null && fast.next.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
