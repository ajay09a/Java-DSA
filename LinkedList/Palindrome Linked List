package fractionpackage;

public class Node<T> {
	T data;
	Node <T> next;
	Node(T data){
		this.data = data;
	}
}





********************************
********************************





package fractionpackage;

import java.util.Scanner;

public class PolynomialUse {
	public static Node<Integer> takeInput(){
		Scanner s = new Scanner(System.in);
		int data = s.nextInt();
		Node<Integer> head = null, tail = null;
		while(data!=-1) {
			Node<Integer> current = new Node<>(data);
			if(head == null) {
				head = current;
				tail = current;
			}
			else {
				tail.next = current;
				tail = current;
			}
			data = s.nextInt();
		}
		return head;
	}
	public static void print(Node<Integer> head) {
		while(head!=null) {
			System.out.print(head.data + " ");
			head = head.next;
		}
		System.out.println();
	}
	public static boolean isPalindrome(Node<Integer> head) {
		boolean check = true;
		Node<Integer> temp = head;
		Node<Integer> node = head;
		int count =0;
//		count number of element in the linked list
		while(temp!=null) {
			temp = temp.next;
			count++;
		}
		temp = head;
		int n1 = count/2;
		int n2 = count - n1;
//		create another linked list temp2 which is final half
		for(int i = 0; i<n1-1; i++) {
			temp = temp.next;
		}
		Node<Integer> temp2 = temp.next;
		temp.next = null;
		
		temp2 = reverse(temp2);
		temp = temp2;
		node = head;
		while (head.next!=null){
            if (!head.data.equals(temp2.data)){
            	check=false;
            	return check;
            }
            head = head.next;
            temp2 = temp2.next;
        }
		
		temp = reverse(temp);
		count =0;
		node = head;
		while(node.next!=null) {
			node = node.next;
			count++;
		}
		node.next = temp;
		
		
        return check;
	}
	public static Node<Integer> reverse(Node<Integer> root) {
		Node<Integer> cur = root;
        Node<Integer> pre = null;
        while(cur!=null) {
        	Node<Integer> temp = cur.next;
        	cur.next = pre;
        	pre = cur;
        	cur = temp;
        }
        return pre;
	}
	
	public static void main(String[] args) {
		
		Node<Integer> n1 = takeInput();
		print(n1);
		System.out.println(isPalindrome(n1));;
		print(n1);
	}

}











************************************
************************************




// another approach to check palindrome



public static boolean isPalindrome(LinkedListNode<Integer> head) {
		//Your code goes here
        LinkedListNode<Integer> node=head;
        ArrayList<Integer> arr = new ArrayList<>();
        while (node!=null)
        {
            arr.add(node.data);
            node=node.next;
        }
        int start=0, end=arr.size()-1;
        while(start<end)
        {
            if (arr.get(start)!=arr.get(end))
            {
                return false;
            }
            else
            {
                start=start+1;
                end=end-1;
            }
        }
        
        return true;
	}
