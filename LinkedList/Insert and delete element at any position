package fractionpackage;

import java.util.Scanner;

public class PolynomialUse {
	public static Node<Integer> takeInput(){
		Scanner s = new Scanner(System.in);
		int data = s.nextInt();
		Node<Integer> head = null, tail = null;
		while(data!=-1) {
			Node<Integer> current = new Node<>(data);
			if(head == null) {
				head = current;
				tail = current;
			}
			else {
				tail.next = current;
				tail = current;
			}
			data = s.nextInt();
		}
		return head;
	}
	public static void print(Node<Integer> head) {
		while(head!=null) {
			System.out.print(head.data + " ");
			head = head.next;
		}
		System.out.println();
	}
	public static void add(Node<Integer> head,int n, int pos) {
		Node<Integer> num = new Node<>(n);
		for(int i=0; i<=pos;i++){
			if(i==pos-1) {
				num.next = head.next;
				head.next = num;
			}
			if(pos == 0) {
				int temp = head.data;
				head.data = num.data;
				Node<Integer> Duplicate = head.next;
				
				Node<Integer> adding = new Node<>(temp);
				head.next = adding;
				adding.next = Duplicate;
			}
			head = head.next;
		}
	}
	public static Node<Integer> deleteNode(Node<Integer> head, int i) {
		// Write your code here.
        if(head==null )
            return head;
        if(i==0)
            return head.next;
        int count=0;
        Node<Integer> temp=head;
        while(temp!=null && count<i-1)
        {
            temp=temp.next;
            count++;
        }
        if(temp==null)
            return head;
        if(temp.next!=null)
            temp.next=temp.next.next;
         
        
        return head;
	}

	public static void main(String[] args) {
		
		Node<Integer> n1 = takeInput();
		print(n1);
//		add(n1,60,0);
		n1 = deleteNode(n1,0);
		print(n1);

	}

}
